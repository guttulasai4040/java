import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class QueueWithReversal<T> {
    private Queue<T> queue = new LinkedList<>();
    private Stack<T> stack = new Stack<>();

    public void enqueue(T item) {
        queue.offer(item);
    }

    public T dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return null;
        }
        return queue.poll();
    }

    public void reverse() {
        while (!isEmpty()) {
            stack.push(queue.poll());
        }
        while (!stack.isEmpty()) {
            queue.offer(stack.pop());
        }
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public static void main(String[] args) {
        QueueWithReversal<Integer> queue = new QueueWithReversal<>();
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        queue.reverse();
        System.out.println(queue.dequeue()); // Outputs 3
        System.out.println(queue.dequeue()); // Outputs 2
    }
}
